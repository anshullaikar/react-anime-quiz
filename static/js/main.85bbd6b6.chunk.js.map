{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/anime.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","AnswerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85bbd6b6.chunk.js","sourcesContent":["import {shuffleArray} from \"./utils\"\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & {answers: string[]}\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\", \r\n    HARD = \"hard\" \r\n}\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=31&difficulty=${difficulty}&type=multiple`;\r\n    //await fetch and then await json\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers, \r\n                question.correct_answer])\r\n        }\r\n    ))\r\n}","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5)","import styled from \"styled-components\"\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 75ch;\r\n    margin: 0.3em;\r\n    background: #fff;\r\n    padding: 1em;\r\n    border: 2px solid #000;\r\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n    text-align: center;\r\n    p{\r\n        font-size: 1rem;\r\n        font-weight: 700;\r\n    }\r\n`\r\n\r\ntype buttonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<buttonWrapperProps>`\r\n    transition: all 0.1s ease;\r\n\r\n    :hover{\r\n        \r\n        opacity: 0.8;\r\n    }\r\n    \r\n    button:focus {\r\n        outline-color: lightgray; //accessibility\r\n    }\r\n\r\n    button{\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 1rem;\r\n        font-weight: 600;\r\n        width: 100%;\r\n        margin: 0.2em;\r\n        background: ${({correct, userClicked}) => correct ? \"#77dd76\": //green if correct\r\n        !correct && userClicked ? \r\n        \"#ff6962\" : \"white\"}; //red or white\r\n        border: 3px solid white;\r\n        box-shadow: 1px 2px 0px rgba(0,0,0,0.1);\r\n    }\r\n\r\n`","import React from \"react\"\r\nimport { NumberLiteralType } from \"typescript\"\r\nimport {AnswerObject} from \"../App\"\r\nimport {Wrapper, ButtonWrapper} from \"./QuestionCard.styles\"\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard : React.FC<Props> = ({\r\n    question, \r\n    answers, \r\n    callback, \r\n    userAnswer, \r\n    questionNr, \r\n    totalQuestions,\r\n}) => (\r\n    <Wrapper>\r\n        <p className=\"number\">Question: {questionNr} / {totalQuestions}</p>\r\n        <p dangerouslySetInnerHTML={{ __html: question}}/>\r\n        <div>\r\n            {answers.map(answer => (\r\n                <ButtonWrapper \r\n                key ={answer}\r\n                correct = {userAnswer?.correctAnswer === answer}\r\n                userClicked = {userAnswer?.answer === answer}>\r\n                    <button disabled={!!userAnswer} value = {answer} onClick = {callback}>\r\n                        <span dangerouslySetInnerHTML={{__html: answer}}></span>\r\n                    </button>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </div>\r\n\r\n    </Wrapper>\r\n)\r\n\r\nexport default QuestionCard","export default __webpack_public_path__ + \"static/media/anime.eabb19bb.jpg\";","import styled, {createGlobalStyle} from \"styled-components\"\r\n//@ts-ignore\r\nimport BGImage from \"./images/anime.jpg\"\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n@media only screen and (max-width: 800px) {\r\n  :root {\r\n    font-size: 12px;\r\n  }\r\n}\r\n@media only screen and (max-width: 600px) {\r\n  :root {\r\n    font-size: 10px;\r\n  }\r\n}\r\n\r\n*{\r\n    box-sizing: border-box;\r\n    font-family: 'Shippori Mincho B1', sans-serif;\r\n}\r\nhtml{\r\n    height: 100%;\r\n}\r\nbody {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 0.5em;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n.blur{\r\n    backdrop-filter: blur(10px);\r\n    -webkit-backdrop-filter: blur(10px);\r\n    margin: 1em;\r\n    padding: 1em;\r\n}\r\n\r\n`\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    > p {\r\n        color: #fff;\r\n    }\r\n    .header-bg{\r\n        margin: 1em;\r\n        background-image: linear-gradient(90deg, rgba(255, 105, 98, 0.3), rgba(119, 221, 118, 0.3))\r\n    }\r\n    .score{\r\n        color: black;\r\n        border: 2px solid black;\r\n        padding: 0.5em 1em;\r\n        font-size: 1.5rem;\r\n        font-weight: 600;\r\n        margin: 1em;\r\n        background: white;\r\n    }\r\n    h1{\r\n        font-size: 6rem;\r\n        background-image: linear-gradient(180deg, #fff, #fff);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(3px 3px #000);\r\n        text-align: center;\r\n        margin: 0.175em;\r\n    }\r\n    .start, .next{\r\n        cursor: pointer;\r\n        outline-color: white;\r\n        background: linear-gradient(180deg, #fff, #fff);\r\n        border: 2.5px solid #000;\r\n        margin: 0.5em;\r\n        font-size: 1.5rem;\r\n        font-weight: 700;\r\n        padding: 0.5em 0.75em;\r\n        text-transform: uppercase;\r\n    }\r\n    .start{\r\n        max-width: 200px;\r\n    }\r\n    \r\n`","import React, {useState} from 'react';\nimport {fetchQuizQuestions, Question} from \"./API\"\nimport QuestionCard from \"./components/QuestionCard\"\n\n//Types\nimport {QuestionState, Difficulty} from \"./API\"\n//Styles\nimport {GlobalStyle, Wrapper} from \"./App.styles\"\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10\n\nfunction App() {\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n\n  const startTrivia = async () => {\n    setLoading(true)\n    setGameOver(false)\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    )\n\n    setQuestions(newQuestions)\n    setScore(0)\n    setNumber(0)\n    setLoading(false)\n    setUserAnswers([])\n  }\n  \n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver){\n      //user answer\n      const answer = e.currentTarget.value;\n      //check answer with correct value\n      const correct = questions[number].correct_answer === answer;\n      //add score if answer is correct\n      if (correct) setScore(prev => prev + 1)\n      // save answer in array for user answers\n      const AnswerObject = {\n        question: questions[number].question,\n        answer, \n        correct, \n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers(prev => [...prev, AnswerObject])\n\n\n    }\n  }\n  \n  const nextQuestion = () => {\n    //move on to the next question\n    const nextQuestion = number + 1\n    if (nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true)\n    }\n    else{\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n    <GlobalStyle/>\n    <div className= \"center-items\">\n      <Wrapper className=\"\">\n        <div className= \"header-bg\"> \n          <h1>ANIME QUIZ</h1>\n        </div>\n      {\n      gameOver ? (\n      <button className = \"start\" onClick={startTrivia}>\n        Start\n      </button>\n      ): null}\n      {\n      userAnswers.length == TOTAL_QUESTIONS ? (\n      <button className = \"start\" onClick={startTrivia}>\n        Start Again\n      </button>\n      ): null}\n      {!gameOver ? (<p className=\"score\">Score: {score}</p>) : null}\n      {loading && (<p>Loading Questions...</p>)}\n      {!loading && !gameOver &&\n      (<QuestionCard \n      questionNr = {number+1} \n      totalQuestions = {TOTAL_QUESTIONS} \n      question = {questions[number].question} \n      answers = {questions[number].answers} \n      userAnswer = {userAnswers ? userAnswers[number] : undefined} \n      callback = {checkAnswer}\n      />)}\n      {!loading && !gameOver && userAnswers.length == number + 1 && number !== TOTAL_QUESTIONS - 1 &&\n      (<button className= \"next\" onClick= {nextQuestion}>Next Question</button>)}\n    </Wrapper>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}